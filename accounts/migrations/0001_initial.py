# Generated by Django 5.2.5 on 2025-08-19 19:53

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_type', models.CharField(choices=[('buyer', 'Comprador'), ('seller', 'Vendedor'), ('both', 'Comprador e Vendedor'), ('admin', 'Administrador')], default='buyer', max_length=10, verbose_name='Tipo de Utilizador')),
                ('phone', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Número de telefone deve estar no formato: '+999999999'. Até 15 dígitos permitidos.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Telefone')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Data de Nascimento')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/%Y/%m/%d/', verbose_name='Foto de Perfil')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Utilizador Verificado')),
                ('is_premium', models.BooleanField(default=False, verbose_name='Utilizador Premium')),
                ('email_verified', models.BooleanField(default=False, verbose_name='Email Verificado')),
                ('phone_verified', models.BooleanField(default=False, verbose_name='Telefone Verificado')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='Cidade')),
                ('district', models.CharField(blank=True, max_length=50, null=True, verbose_name='Distrito')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('login_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilizador',
                'verbose_name_plural': 'Utilizadores',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BuyerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_brands', models.TextField(blank=True, help_text='Separar por vírgula', null=True, verbose_name='Marcas Preferidas')),
                ('min_budget', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Orçamento Mínimo (€)')),
                ('max_budget', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Orçamento Máximo (€)')),
                ('preferred_fuel_type', models.CharField(choices=[('gasoline', 'Gasolina'), ('diesel', 'Gasóleo'), ('electric', 'Elétrico'), ('hybrid', 'Híbrido'), ('lpg', 'GPL'), ('no_preference', 'Sem Preferência')], default='no_preference', max_length=20, verbose_name='Combustível Preferido')),
                ('max_year', models.PositiveIntegerField(blank=True, null=True, verbose_name='Ano Máximo')),
                ('min_year', models.PositiveIntegerField(blank=True, null=True, verbose_name='Ano Mínimo')),
                ('max_mileage', models.PositiveIntegerField(blank=True, null=True, verbose_name='Quilometragem Máxima')),
                ('total_purchases', models.PositiveIntegerField(default=0, verbose_name='Total de Compras')),
                ('total_spent', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='Total Gasto (€)')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Notificações por Email')),
                ('sms_notifications', models.BooleanField(default=False, verbose_name='Notificações por SMS')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='Notificações Push')),
                ('price_alert_enabled', models.BooleanField(default=False, verbose_name='Alertas de Preço')),
                ('new_cars_alert', models.BooleanField(default=True, verbose_name='Alertas de Carros Novos')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='buyer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Perfil do Comprador',
                'verbose_name_plural': 'Perfis dos Compradores',
            },
        ),
        migrations.CreateModel(
            name='SellerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seller_type', models.CharField(choices=[('individual', 'Pessoa Singular'), ('dealer', 'Stand/Concessionário'), ('company', 'Empresa')], default='individual', max_length=15, verbose_name='Tipo de Vendedor')),
                ('company_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Nome da Empresa/Stand')),
                ('nif', models.CharField(blank=True, help_text='Número de Identificação Fiscal', max_length=15, null=True, verbose_name='NIF')),
                ('address', models.CharField(max_length=200, verbose_name='Morada Comercial')),
                ('city', models.CharField(max_length=100, verbose_name='Cidade')),
                ('district', models.CharField(max_length=50, verbose_name='Distrito')),
                ('postal_code', models.CharField(max_length=8, validators=[django.core.validators.RegexValidator(message='Código postal deve estar no formato: 0000-000', regex='^\\d{4}-\\d{3}$')], verbose_name='Código Postal')),
                ('business_hours', models.TextField(blank=True, null=True, verbose_name='Horário de Funcionamento')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Descrição da Empresa')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Website')),
                ('facebook_url', models.URLField(blank=True, null=True)),
                ('instagram_url', models.URLField(blank=True, null=True)),
                ('linkedin_url', models.URLField(blank=True, null=True)),
                ('rating', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Avaliação Média')),
                ('total_sales', models.PositiveIntegerField(default=0, verbose_name='Total de Vendas')),
                ('total_reviews', models.PositiveIntegerField(default=0, verbose_name='Total de Avaliações')),
                ('auto_renew_ads', models.BooleanField(default=False, verbose_name='Renovar Anúncios Automaticamente')),
                ('allow_phone_contact', models.BooleanField(default=True, verbose_name='Permitir Contacto Telefónico')),
                ('allow_email_contact', models.BooleanField(default=True, verbose_name='Permitir Contacto por Email')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='seller_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Perfil do Vendedor',
                'verbose_name_plural': 'Perfis dos Vendedores',
            },
        ),
        migrations.CreateModel(
            name='UserVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verification_type', models.CharField(choices=[('email', 'Verificação de Email'), ('phone', 'Verificação de Telefone'), ('identity', 'Verificação de Identidade'), ('address', 'Verificação de Morada'), ('business', 'Verificação Comercial')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('approved', 'Aprovado'), ('rejected', 'Rejeitado'), ('expired', 'Expirado')], default='pending', max_length=20)),
                ('document', models.FileField(blank=True, null=True, upload_to='verifications/%Y/%m/%d/', verbose_name='Documento')),
                ('verification_code', models.CharField(blank=True, max_length=10, null=True)),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Observações')),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verifications', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Verificação de Utilizador',
                'verbose_name_plural': 'Verificações de Utilizadores',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['user_type'], name='accounts_us_user_ty_b6cfc8_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_verified'], name='accounts_us_is_veri_fa45d6_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['city', 'district'], name='accounts_us_city_55a743_idx'),
        ),
        migrations.AddIndex(
            model_name='buyerprofile',
            index=models.Index(fields=['preferred_fuel_type'], name='accounts_bu_preferr_97cf8a_idx'),
        ),
        migrations.AddIndex(
            model_name='buyerprofile',
            index=models.Index(fields=['max_budget'], name='accounts_bu_max_bud_80bbdb_idx'),
        ),
        migrations.AddIndex(
            model_name='sellerprofile',
            index=models.Index(fields=['seller_type'], name='accounts_se_seller__60895c_idx'),
        ),
        migrations.AddIndex(
            model_name='sellerprofile',
            index=models.Index(fields=['city', 'district'], name='accounts_se_city_d617dc_idx'),
        ),
        migrations.AddIndex(
            model_name='sellerprofile',
            index=models.Index(fields=['rating'], name='accounts_se_rating_9b360c_idx'),
        ),
        migrations.AddIndex(
            model_name='userverification',
            index=models.Index(fields=['status'], name='accounts_us_status_102cb8_idx'),
        ),
        migrations.AddIndex(
            model_name='userverification',
            index=models.Index(fields=['verification_type'], name='accounts_us_verific_85b2f8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userverification',
            unique_together={('user', 'verification_type')},
        ),
    ]
