# Generated by Django 5.2.5 on 2025-08-19 19:55

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Marca')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='brands/', verbose_name='Logótipo')),
                ('country', models.CharField(blank=True, max_length=50, null=True, verbose_name='País de Origem')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Website Oficial')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativa')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Marca',
                'verbose_name_plural': 'Marcas',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('version', models.CharField(blank=True, max_length=100, null=True, verbose_name='Versão')),
                ('year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2026)], verbose_name='Ano')),
                ('color', models.CharField(max_length=50, verbose_name='Cor')),
                ('fuel_type', models.CharField(choices=[('gasoline', 'Gasolina'), ('diesel', 'Gasóleo'), ('electric', 'Elétrico'), ('hybrid', 'Híbrido'), ('plugin_hybrid', 'Híbrido Plug-in'), ('lpg', 'GPL'), ('ethanol', 'Etanol')], max_length=20, verbose_name='Combustível')),
                ('transmission', models.CharField(choices=[('manual', 'Manual'), ('automatic', 'Automático'), ('semi_automatic', 'Semi-automático'), ('cvt', 'CVT')], max_length=20, verbose_name='Caixa de Velocidades')),
                ('engine_size', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Cilindrada (L)')),
                ('power', models.PositiveIntegerField(blank=True, null=True, verbose_name='Potência (CV)')),
                ('mileage', models.PositiveIntegerField(verbose_name='Quilometragem (km)')),
                ('doors', models.PositiveSmallIntegerField(choices=[(2, '2 Portas'), (3, '3 Portas'), (4, '4 Portas'), (5, '5 Portas')], default=4, verbose_name='Número de Portas')),
                ('seats', models.PositiveSmallIntegerField(default=5, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(9)], verbose_name='Número de Lugares')),
                ('condition', models.CharField(choices=[('new', 'Novo'), ('used', 'Usado'), ('certified', 'Seminovo Certificado'), ('damaged', 'Danificado')], default='used', max_length=20, verbose_name='Estado')),
                ('license_plate', models.CharField(max_length=10, unique=True, verbose_name='Matrícula')),
                ('registration_date', models.DateField(blank=True, null=True, verbose_name='Data de Matrícula')),
                ('inspection_valid_until', models.DateField(blank=True, null=True, verbose_name='IPO Válido Até')),
                ('insurance_valid_until', models.DateField(blank=True, null=True, verbose_name='Seguro Válido Até')),
                ('price', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Preço (€)')),
                ('original_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Preço Original (€)')),
                ('negotiable', models.BooleanField(default=True, verbose_name='Preço Negociável')),
                ('city', models.CharField(max_length=100, verbose_name='Cidade')),
                ('district', models.CharField(max_length=50, verbose_name='Distrito')),
                ('postal_code', models.CharField(blank=True, max_length=8, null=True, verbose_name='Código Postal')),
                ('title', models.CharField(max_length=200, verbose_name='Título do Anúncio')),
                ('description', models.TextField(verbose_name='Descrição')),
                ('air_conditioning', models.BooleanField(default=False, verbose_name='Ar Condicionado')),
                ('gps', models.BooleanField(default=False, verbose_name='GPS')),
                ('bluetooth', models.BooleanField(default=False, verbose_name='Bluetooth')),
                ('parking_sensors', models.BooleanField(default=False, verbose_name='Sensores de Estacionamento')),
                ('backup_camera', models.BooleanField(default=False, verbose_name='Câmara de Marcha-atrás')),
                ('leather_seats', models.BooleanField(default=False, verbose_name='Bancos em Pele')),
                ('electric_windows', models.BooleanField(default=False, verbose_name='Vidros Elétricos')),
                ('central_locking', models.BooleanField(default=False, verbose_name='Fecho Central')),
                ('abs_brakes', models.BooleanField(default=False, verbose_name='ABS')),
                ('airbags', models.BooleanField(default=False, verbose_name='Airbags')),
                ('status', models.CharField(choices=[('active', 'Ativo'), ('sold', 'Vendido'), ('reserved', 'Reservado'), ('inactive', 'Inativo'), ('pending', 'Pendente Aprovação'), ('rejected', 'Rejeitado')], default='pending', max_length=20, verbose_name='Estado do Anúncio')),
                ('featured', models.BooleanField(default=False, verbose_name='Anúncio em Destaque')),
                ('views', models.PositiveIntegerField(default=0, verbose_name='Visualizações')),
                ('favorites_count', models.PositiveIntegerField(default=0, verbose_name='Número de Favoritos')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='Data de Publicação')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Data de Expiração')),
                ('sold_at', models.DateTimeField(blank=True, null=True, verbose_name='Data de Venda')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cars.brand', verbose_name='Marca')),
                ('seller', models.ForeignKey(limit_choices_to={'user_type__in': ['seller', 'both', 'admin']}, on_delete=django.db.models.deletion.CASCADE, related_name='cars_for_sale', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Carro',
                'verbose_name_plural': 'Carros',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CarComparison',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nome da Comparação')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cars', models.ManyToManyField(to='cars.car', verbose_name='Carros para Comparar')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comparisons', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Comparação',
                'verbose_name_plural': 'Comparações',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CarModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Modelo')),
                ('body_type', models.CharField(choices=[('sedan', 'Sedan'), ('hatchback', 'Hatchback'), ('suv', 'SUV'), ('coupe', 'Coupé'), ('convertible', 'Conversível'), ('wagon', 'Carrinha'), ('pickup', 'Pick-up'), ('van', 'Carrinha de Carga'), ('minivan', 'Monovolume')], max_length=20, verbose_name='Tipo de Carroçaria')),
                ('generation', models.CharField(blank=True, max_length=50, null=True, verbose_name='Geração')),
                ('start_year', models.PositiveIntegerField(verbose_name='Ano de Início')),
                ('end_year', models.PositiveIntegerField(blank=True, null=True, verbose_name='Ano de Fim')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='models', to='cars.brand')),
            ],
            options={
                'verbose_name': 'Modelo de Carro',
                'verbose_name_plural': 'Modelos de Carros',
                'ordering': ['brand__name', 'name'],
                'unique_together': {('brand', 'name', 'generation')},
            },
        ),
        migrations.CreateModel(
            name='CarAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nome do Alerta')),
                ('min_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Preço Mínimo (€)')),
                ('max_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Preço Máximo (€)')),
                ('min_year', models.PositiveIntegerField(blank=True, null=True, verbose_name='Ano Mínimo')),
                ('max_year', models.PositiveIntegerField(blank=True, null=True, verbose_name='Ano Máximo')),
                ('fuel_types', models.CharField(blank=True, help_text='Separar por vírgula', max_length=200, null=True, verbose_name='Tipos de Combustível')),
                ('max_mileage', models.PositiveIntegerField(blank=True, null=True, verbose_name='Quilometragem Máxima')),
                ('cities', models.CharField(blank=True, help_text='Separar por vírgula', max_length=500, null=True, verbose_name='Cidades')),
                ('is_active', models.BooleanField(default=True, verbose_name='Alerta Ativo')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Notificações por Email')),
                ('last_notification', models.DateTimeField(blank=True, null=True, verbose_name='Última Notificação')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brands', models.ManyToManyField(blank=True, to='cars.brand', verbose_name='Marcas')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='car_alerts', to=settings.AUTH_USER_MODEL)),
                ('car_models', models.ManyToManyField(blank=True, to='cars.carmodel', verbose_name='Modelos')),
            ],
            options={
                'verbose_name': 'Alerta de Carro',
                'verbose_name_plural': 'Alertas de Carros',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='car',
            name='car_model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cars.carmodel', verbose_name='Modelo'),
        ),
        migrations.CreateModel(
            name='CarPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to='cars/%Y/%m/%d/', verbose_name='Foto')),
                ('caption', models.CharField(blank=True, max_length=200, null=True, verbose_name='Legenda')),
                ('is_main', models.BooleanField(default=False, verbose_name='Foto Principal')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Ordem')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='cars.car')),
            ],
            options={
                'verbose_name': 'Foto do Carro',
                'verbose_name_plural': 'Fotos dos Carros',
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='cars.car')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Favorito',
                'verbose_name_plural': 'Favoritos',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=200, verbose_name='Assunto')),
                ('message', models.TextField(verbose_name='Mensagem')),
                ('is_read', models.BooleanField(default=False, verbose_name='Lida')),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='cars.car')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Mensagem',
                'verbose_name_plural': 'Mensagens',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PriceHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_price', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Preço Anterior (€)')),
                ('new_price', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Novo Preço (€)')),
                ('change_reason', models.CharField(blank=True, max_length=200, null=True, verbose_name='Motivo da Alteração')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_history', to='cars.car')),
            ],
            options={
                'verbose_name': 'Histórico de Preços',
                'verbose_name_plural': 'Histórico de Preços',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, '1 Estrela'), (2, '2 Estrelas'), (3, '3 Estrelas'), (4, '4 Estrelas'), (5, '5 Estrelas')], verbose_name='Avaliação')),
                ('title', models.CharField(max_length=200, verbose_name='Título da Avaliação')),
                ('comment', models.TextField(verbose_name='Comentário')),
                ('is_verified_purchase', models.BooleanField(default=False, verbose_name='Compra Verificada')),
                ('is_approved', models.BooleanField(default=True, verbose_name='Aprovado')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('car', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='cars.car')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_given', to=settings.AUTH_USER_MODEL)),
                ('seller', models.ForeignKey(limit_choices_to={'user_type__in': ['seller', 'both']}, on_delete=django.db.models.deletion.CASCADE, related_name='reviews_received', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Avaliação',
                'verbose_name_plural': 'Avaliações',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='car',
            index=models.Index(fields=['status'], name='cars_car_status_3b4442_idx'),
        ),
        migrations.AddIndex(
            model_name='car',
            index=models.Index(fields=['brand', 'car_model'], name='cars_car_brand_i_6eba69_idx'),
        ),
        migrations.AddIndex(
            model_name='car',
            index=models.Index(fields=['price'], name='cars_car_price_f6b08b_idx'),
        ),
        migrations.AddIndex(
            model_name='car',
            index=models.Index(fields=['year'], name='cars_car_year_fc6735_idx'),
        ),
        migrations.AddIndex(
            model_name='car',
            index=models.Index(fields=['fuel_type'], name='cars_car_fuel_ty_ea08fc_idx'),
        ),
        migrations.AddIndex(
            model_name='car',
            index=models.Index(fields=['city', 'district'], name='cars_car_city_df828f_idx'),
        ),
        migrations.AddIndex(
            model_name='car',
            index=models.Index(fields=['featured', '-created_at'], name='cars_car_feature_6748c5_idx'),
        ),
        migrations.AddIndex(
            model_name='favorite',
            index=models.Index(fields=['user', '-created_at'], name='cars_favori_user_id_f04943_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='favorite',
            unique_together={('user', 'car')},
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['recipient', 'is_read'], name='cars_messag_recipie_8886da_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['car', '-created_at'], name='cars_messag_car_id_8fa1e5_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['seller', '-created_at'], name='cars_review_seller__b969f9_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['rating'], name='cars_review_rating_81c45f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('reviewer', 'seller', 'car')},
        ),
    ]
